{"ast":null,"code":"import _classCallCheck from \"/home/luis/Documentos/GrafiTTraders/grafittraders/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/luis/Documentos/GrafiTTraders/grafittraders/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/luis/Documentos/GrafiTTraders/grafittraders/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/luis/Documentos/GrafiTTraders/grafittraders/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/luis/Documentos/GrafiTTraders/grafittraders/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/luis/Documentos/GrafiTTraders/grafittraders/src/grafits/TVChartContainer/index.jsx\";\nimport * as React from 'react';\nimport './index.css';\nimport Datafeed from './api';\n\nfunction getLanguageFromURL() {\n  var regex = new RegExp('[\\\\?&]lang=([^&#]*)');\n  var results = regex.exec(window.location.search);\n  return results === null ? null : decodeURIComponent(results[1].replace(/\\+/g, ' '));\n}\n\nexport var TVChartContainer =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(TVChartContainer, _React$PureComponent);\n\n  function TVChartContainer() {\n    _classCallCheck(this, TVChartContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TVChartContainer).apply(this, arguments));\n  }\n\n  _createClass(TVChartContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var widgetOptions = {\n        debug: false,\n        symbol: this.props.symbol,\n        datafeed: Datafeed,\n        interval: this.props.interval,\n        container_id: this.props.containerId,\n        library_path: this.props.libraryPath,\n        locale: getLanguageFromURL() || 'en',\n        disabled_features: ['use_localstorage_for_settings'],\n        enabled_features: ['study_templates'],\n        charts_storage_url: this.props.chartsStorageUrl,\n        charts_storage_api_version: this.props.chartsStorageApiVersion,\n        client_id: this.props.clientId,\n        user_id: this.props.userId,\n        fullscreen: this.props.fullscreen,\n        autosize: this.props.autosize,\n        studies_overrides: this.props.studiesOverrides,\n        overrides: {\n          // \"mainSeriesProperties.showCountdown\": true,\n          \"paneProperties.background\": \"#131722\",\n          \"paneProperties.vertGridProperties.color\": \"#363c4e\",\n          \"paneProperties.horzGridProperties.color\": \"#363c4e\",\n          \"symbolWatermarkProperties.transparency\": 90,\n          \"scalesProperties.textColor\": \"#AAA\",\n          \"mainSeriesProperties.candleStyle.wickUpColor\": '#336854',\n          \"mainSeriesProperties.candleStyle.wickDownColor\": '#7f323f'\n        }\n      };\n      window.TradingView.onready(function () {\n        var widget = window.tvWidget = new window.TradingView.widget(widgetOptions);\n        widget.onChartReady(function () {\n          console.log('Chart has loaded!');\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        id: this.props.containerId,\n        className: 'TVChartContainer',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return TVChartContainer;\n}(React.PureComponent);\nTVChartContainer.defaultProps = {\n  symbol: 'Coinbase:BTC/USD',\n  interval: '15',\n  containerId: 'tv_chart_container',\n  libraryPath: '/charting_library/',\n  chartsStorageUrl: 'https://saveload.tradingview.com',\n  chartsStorageApiVersion: '1.1',\n  clientId: 'tradingview.com',\n  userId: 'public_user_id',\n  fullscreen: false,\n  autosize: true,\n  studiesOverrides: {}\n};","map":{"version":3,"sources":["/home/luis/Documentos/GrafiTTraders/grafittraders/src/grafits/TVChartContainer/index.jsx"],"names":["React","Datafeed","getLanguageFromURL","regex","RegExp","results","exec","window","location","search","decodeURIComponent","replace","TVChartContainer","widgetOptions","debug","symbol","props","datafeed","interval","container_id","containerId","library_path","libraryPath","locale","disabled_features","enabled_features","charts_storage_url","chartsStorageUrl","charts_storage_api_version","chartsStorageApiVersion","client_id","clientId","user_id","userId","fullscreen","autosize","studies_overrides","studiesOverrides","overrides","TradingView","onready","widget","tvWidget","onChartReady","console","log","PureComponent","defaultProps"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport './index.css';\nimport Datafeed from './api'\n\n\nfunction getLanguageFromURL() {\n\tconst regex = new RegExp('[\\\\?&]lang=([^&#]*)');\n\tconst results = regex.exec(window.location.search);\n\treturn results === null ? null : decodeURIComponent(results[1].replace(/\\+/g, ' '));\n}\n\nexport class TVChartContainer extends React.PureComponent {\n\n\tstatic defaultProps = {\n\t\tsymbol: 'Coinbase:BTC/USD',\n\t\tinterval: '15',\n\t\tcontainerId: 'tv_chart_container',\n\t\tlibraryPath: '/charting_library/',\n\t\tchartsStorageUrl: 'https://saveload.tradingview.com',\n\t\tchartsStorageApiVersion: '1.1',\n\t\tclientId: 'tradingview.com',\n\t\tuserId: 'public_user_id',\n\t\tfullscreen: false,\n\t\tautosize: true,\n\t\tstudiesOverrides: {},\n\t};\n\n\tcomponentDidMount() {\n\t\tconst widgetOptions = {\n\t\t\tdebug: false,\n\t\t\tsymbol: this.props.symbol,\n\t\t\tdatafeed: Datafeed,\n\t\t\tinterval: this.props.interval,\n\t\t\tcontainer_id: this.props.containerId,\n\t\t\tlibrary_path: this.props.libraryPath,\n\t\t\tlocale: getLanguageFromURL() || 'en',\n\t\t\tdisabled_features: ['use_localstorage_for_settings'],\n\t\t\tenabled_features: ['study_templates'],\n\t\t\tcharts_storage_url: this.props.chartsStorageUrl,\n\t\t\tcharts_storage_api_version: this.props.chartsStorageApiVersion,\n\t\t\tclient_id: this.props.clientId,\n\t\t\tuser_id: this.props.userId,\n\t\t\tfullscreen: this.props.fullscreen,\n\t\t\tautosize: this.props.autosize,\n\t\t\tstudies_overrides: this.props.studiesOverrides,\n\t\t\toverrides: {\n\t\t\t\t// \"mainSeriesProperties.showCountdown\": true,\n\t\t\t\t\"paneProperties.background\": \"#131722\",\n\t\t\t\t\"paneProperties.vertGridProperties.color\": \"#363c4e\",\n\t\t\t\t\"paneProperties.horzGridProperties.color\": \"#363c4e\",\n\t\t\t\t\"symbolWatermarkProperties.transparency\": 90,\n\t\t\t\t\"scalesProperties.textColor\" : \"#AAA\",\n\t\t\t\t\"mainSeriesProperties.candleStyle.wickUpColor\": '#336854',\n\t\t\t\t\"mainSeriesProperties.candleStyle.wickDownColor\": '#7f323f',\n\t\t\t}\n\t\t};\n\n\t\twindow.TradingView.onready(() => {\n\t\t\tconst widget = window.tvWidget = new window.TradingView.widget(widgetOptions);\n\n\t\t\twidget.onChartReady(() => {\n\t\t\t\tconsole.log('Chart has loaded!')\n\t\t\t});\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tid={ this.props.containerId }\n\t\t\t\tclassName={ 'TVChartContainer' }\n\t\t\t/>\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}