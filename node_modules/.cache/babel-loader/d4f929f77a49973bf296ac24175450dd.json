{"ast":null,"code":"var rp = require('request-promise').defaults({\n  json: true\n});\n\nvar api_root = 'https://min-api.cryptocompare.com';\nvar history = {};\nexport default {\n  history: history,\n  getBars: function getBars(symbolInfo, resolution, from, to, first, limit) {\n    var split_symbol = symbolInfo.name.split(/[:/]/);\n    var url = resolution === 'D' ? '/data/histoday' : resolution >= 60 ? '/data/histohour' : '/data/histominute';\n    var qs = {\n      e: split_symbol[0],\n      fsym: split_symbol[1],\n      tsym: split_symbol[2],\n      toTs: to ? to : '',\n      limit: limit ? limit : 2000 // aggregate: 1//resolution \n      // console.log({qs})\n\n    };\n    return rp({\n      url: \"\".concat(api_root).concat(url),\n      qs: qs\n    }).then(function (data) {\n      console.log({\n        data: data\n      });\n\n      if (data.Response && data.Response === 'Error') {\n        console.log('CryptoCompare API error:', data.Message);\n        return [];\n      }\n\n      if (data.Data.length) {\n        console.log(\"Actually returned: \".concat(new Date(data.TimeFrom * 1000).toISOString(), \" - \").concat(new Date(data.TimeTo * 1000).toISOString()));\n        var bars = data.Data.map(function (el) {\n          return {\n            time: el.time * 1000,\n            //TradingView requires bar time in ms\n            low: el.low,\n            high: el.high,\n            open: el.open,\n            close: el.close,\n            volume: el.volumefrom\n          };\n        });\n\n        if (first) {\n          var lastBar = bars[bars.length - 1];\n          history[symbolInfo.name] = {\n            lastBar: lastBar\n          };\n        }\n\n        return bars;\n      } else {\n        return [];\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/home/luis/Documentos/GrafiTTraders/grafittraders/src/grafits/TVChartContainer/api/historyProvider.js"],"names":["rp","require","defaults","json","api_root","history","getBars","symbolInfo","resolution","from","to","first","limit","split_symbol","name","split","url","qs","e","fsym","tsym","toTs","then","data","console","log","Response","Message","Data","length","Date","TimeFrom","toISOString","TimeTo","bars","map","el","time","low","high","open","close","volume","volumefrom","lastBar"],"mappings":"AAAA,IAAIA,EAAE,GAAGC,OAAO,CAAC,iBAAD,CAAP,CAA2BC,QAA3B,CAAoC;AAACC,EAAAA,IAAI,EAAE;AAAP,CAApC,CAAT;;AAEA,IAAMC,QAAQ,GAAG,mCAAjB;AACA,IAAMC,OAAO,GAAG,EAAhB;AAEA,eAAe;AACdA,EAAAA,OAAO,EAAEA,OADK;AAGXC,EAAAA,OAAO,EAAE,iBAASC,UAAT,EAAqBC,UAArB,EAAiCC,IAAjC,EAAuCC,EAAvC,EAA2CC,KAA3C,EAAkDC,KAAlD,EAAyD;AACpE,QAAIC,YAAY,GAAGN,UAAU,CAACO,IAAX,CAAgBC,KAAhB,CAAsB,MAAtB,CAAnB;AACC,QAAMC,GAAG,GAAGR,UAAU,KAAK,GAAf,GAAqB,gBAArB,GAAwCA,UAAU,IAAI,EAAd,GAAmB,iBAAnB,GAAuC,mBAA3F;AACA,QAAMS,EAAE,GAAG;AACTC,MAAAA,CAAC,EAAEL,YAAY,CAAC,CAAD,CADN;AAETM,MAAAA,IAAI,EAAEN,YAAY,CAAC,CAAD,CAFT;AAGTO,MAAAA,IAAI,EAAEP,YAAY,CAAC,CAAD,CAHT;AAITQ,MAAAA,IAAI,EAAGX,EAAE,GAAGA,EAAH,GAAQ,EAJR;AAKTE,MAAAA,KAAK,EAAEA,KAAK,GAAGA,KAAH,GAAW,IALd,CAMT;AAEF;;AARW,KAAX;AAUK,WAAOZ,EAAE,CAAC;AACFgB,MAAAA,GAAG,YAAKZ,QAAL,SAAgBY,GAAhB,CADD;AAEFC,MAAAA,EAAE,EAAFA;AAFE,KAAD,CAAF,CAIFK,IAJE,CAIG,UAAAC,IAAI,EAAI;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY;AAACF,QAAAA,IAAI,EAAJA;AAAD,OAAZ;;AACZ,UAAIA,IAAI,CAACG,QAAL,IAAiBH,IAAI,CAACG,QAAL,KAAkB,OAAvC,EAAgD;AAC/CF,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAuCF,IAAI,CAACI,OAA5C;AACA,eAAO,EAAP;AACA;;AACD,UAAIJ,IAAI,CAACK,IAAL,CAAUC,MAAd,EAAsB;AACrBL,QAAAA,OAAO,CAACC,GAAR,8BAAkC,IAAIK,IAAJ,CAASP,IAAI,CAACQ,QAAL,GAAgB,IAAzB,EAA+BC,WAA/B,EAAlC,gBAAoF,IAAIF,IAAJ,CAASP,IAAI,CAACU,MAAL,GAAc,IAAvB,EAA6BD,WAA7B,EAApF;AACA,YAAIE,IAAI,GAAGX,IAAI,CAACK,IAAL,CAAUO,GAAV,CAAc,UAAAC,EAAE,EAAI;AAC9B,iBAAO;AACNC,YAAAA,IAAI,EAAED,EAAE,CAACC,IAAH,GAAU,IADV;AACgB;AACtBC,YAAAA,GAAG,EAAEF,EAAE,CAACE,GAFF;AAGNC,YAAAA,IAAI,EAAEH,EAAE,CAACG,IAHH;AAINC,YAAAA,IAAI,EAAEJ,EAAE,CAACI,IAJH;AAKNC,YAAAA,KAAK,EAAEL,EAAE,CAACK,KALJ;AAMNC,YAAAA,MAAM,EAAEN,EAAE,CAACO;AANL,WAAP;AAQA,SATU,CAAX;;AAUC,YAAIhC,KAAJ,EAAW;AACV,cAAIiC,OAAO,GAAGV,IAAI,CAACA,IAAI,CAACL,MAAL,GAAc,CAAf,CAAlB;AACAxB,UAAAA,OAAO,CAACE,UAAU,CAACO,IAAZ,CAAP,GAA2B;AAAC8B,YAAAA,OAAO,EAAEA;AAAV,WAA3B;AACA;;AACF,eAAOV,IAAP;AACA,OAjBD,MAiBO;AACN,eAAO,EAAP;AACA;AACD,KA9BW,CAAP;AA+BP;AA/Cc,CAAf","sourcesContent":["var rp = require('request-promise').defaults({json: true})\n\nconst api_root = 'https://min-api.cryptocompare.com'\nconst history = {}\n\nexport default {\n\thistory: history,\n\n    getBars: function(symbolInfo, resolution, from, to, first, limit) {\n\t\tvar split_symbol = symbolInfo.name.split(/[:/]/)\n\t\t\tconst url = resolution === 'D' ? '/data/histoday' : resolution >= 60 ? '/data/histohour' : '/data/histominute'\n\t\t\tconst qs = {\n\t\t\t\t\te: split_symbol[0],\n\t\t\t\t\tfsym: split_symbol[1],\n\t\t\t\t\ttsym: split_symbol[2],\n\t\t\t\t\ttoTs:  to ? to : '',\n\t\t\t\t\tlimit: limit ? limit : 2000, \n\t\t\t\t\t// aggregate: 1//resolution \n\t\t\t\t}\n\t\t\t// console.log({qs})\n\n        return rp({\n                url: `${api_root}${url}`,\n                qs,\n            })\n            .then(data => {\n                console.log({data})\n\t\t\t\tif (data.Response && data.Response === 'Error') {\n\t\t\t\t\tconsole.log('CryptoCompare API error:',data.Message)\n\t\t\t\t\treturn []\n\t\t\t\t}\n\t\t\t\tif (data.Data.length) {\n\t\t\t\t\tconsole.log(`Actually returned: ${new Date(data.TimeFrom * 1000).toISOString()} - ${new Date(data.TimeTo * 1000).toISOString()}`)\n\t\t\t\t\tvar bars = data.Data.map(el => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttime: el.time * 1000, //TradingView requires bar time in ms\n\t\t\t\t\t\t\tlow: el.low,\n\t\t\t\t\t\t\thigh: el.high,\n\t\t\t\t\t\t\topen: el.open,\n\t\t\t\t\t\t\tclose: el.close,\n\t\t\t\t\t\t\tvolume: el.volumefrom \n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t\tif (first) {\n\t\t\t\t\t\t\tvar lastBar = bars[bars.length - 1]\n\t\t\t\t\t\t\thistory[symbolInfo.name] = {lastBar: lastBar}\n\t\t\t\t\t\t}\n\t\t\t\t\treturn bars\n\t\t\t\t} else {\n\t\t\t\t\treturn []\n\t\t\t\t}\n\t\t\t})\n}\n}\n"]},"metadata":{},"sourceType":"module"}