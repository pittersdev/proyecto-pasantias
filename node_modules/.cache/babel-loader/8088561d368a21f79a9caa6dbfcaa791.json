{"ast":null,"code":"import _classCallCheck from \"/home/luis/Documentos/GrafiTTraders/grafittraders/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/luis/Documentos/GrafiTTraders/grafittraders/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/luis/Documentos/GrafiTTraders/grafittraders/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/luis/Documentos/GrafiTTraders/grafittraders/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/luis/Documentos/GrafiTTraders/grafittraders/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/luis/Documentos/GrafiTTraders/grafittraders/src/markets/markets-container.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport ReactDom from 'react-dom';\n\nvar MarketsContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MarketsContainer, _Component);\n\n  function MarketsContainer(props) {\n    var _this;\n\n    _classCallCheck(this, MarketsContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MarketsContainer).call(this));\n    _this.state = {\n      cryto: []\n    };\n    return _this;\n  }\n\n  _createClass(MarketsContainer, [{\n    key: \"_getTickerBySymbol\",\n    value: function _getTickerBySymbol(data) {\n      var ticker = {};\n      data.forEach(function (item) {\n        var symbol = item.symbol || item.s;\n        ticker[symbol] = {\n          symbol: symbol,\n          lastPrice: item.lastPrice || item.c,\n          priceChange: item.priceChange || item.p,\n          priceChangePercent: item.priceChangePercent || item.P,\n          highPrice: item.highPrice || item.h,\n          lowPrice: item.lowPrice || item.l,\n          quoteVolume: item.quoteVolume || item.q\n        };\n      });\n      return ticker;\n    }\n  }, {\n    key: \"connectSocketStreams\",\n    value: function connectSocketStreams(streams) {\n      var _this2 = this;\n\n      streams = streams.join('/');\n      var connection = btoa(streams);\n      this[connection] = new WebSocket(\"wss://stream.binance.com:9443/stream?streams=\".concat(streams));\n\n      this[connection].onmessage = function (evt) {\n        var ticker = _this2._getTickerBySymbol(JSON.parse(evt.data).data);\n\n        _this2.props.dispatch({\n          type: 'UPDATE_MARKET_PAIRS',\n          data: ticker\n        });\n\n        !_this2.props.active_market.market && _this2._handleTabClick('BTC');\n\n        _this2.setState({\n          isLoaded: true\n        });\n      };\n\n      this[connection].onerror = function (evt) {\n        console.error(evt);\n      };\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount(props) {\n      var _this3 = this;\n\n      axios.get('https://api.binance/api/v1/exchangeInfo').then.onmessage = function (res) {\n        var ticker = _this3._getTickerBySymbol(JSON.parse(res.data).data); //const crypto = res.v1\n\n\n        console.log(ticker);\n\n        _this3.props.dispatch({\n          type: 'UPDATE_MARKET_PAIRS',\n          data: ticker\n        });\n\n        _this3.setState({\n          crypto: crypto\n        });\n      }.catch(function (error) {\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"holassss\"));\n    }\n  }]);\n\n  return MarketsContainer;\n}(Component);\n\nexport default MarketsContainer;","map":{"version":3,"sources":["/home/luis/Documentos/GrafiTTraders/grafittraders/src/markets/markets-container.js"],"names":["React","Component","axios","ReactDom","MarketsContainer","props","state","cryto","data","ticker","forEach","item","symbol","s","lastPrice","c","priceChange","p","priceChangePercent","P","highPrice","h","lowPrice","l","quoteVolume","q","streams","join","connection","btoa","WebSocket","onmessage","evt","_getTickerBySymbol","JSON","parse","dispatch","type","active_market","market","_handleTabClick","setState","isLoaded","onerror","console","error","get","then","res","log","crypto","catch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios'\nimport ReactDom from 'react-dom'\n\nclass MarketsContainer extends Component{\n\n  constructor(props) {\n    super();\n\n      this.state = {\n        cryto: []\n      };\n  }\n\n  _getTickerBySymbol(data) {\n        let ticker = {}\n        data.forEach(item => {\n            let symbol = item.symbol || item.s;\n            ticker[symbol] = {\n                symbol: symbol,\n                lastPrice: item.lastPrice || item.c,\n                priceChange: item.priceChange || item.p,\n                priceChangePercent: item.priceChangePercent || item.P,\n                highPrice: item.highPrice || item.h,\n                lowPrice: item.lowPrice || item.l,\n                quoteVolume: item.quoteVolume || item.q,\n            }\n        })\n        return ticker;\n    }\n\n\n\n    connectSocketStreams(streams) {\n            streams = streams.join('/');\n            let connection = btoa(streams);\n            this[connection] = new WebSocket(`wss://stream.binance.com:9443/stream?streams=${streams}`);\n            this[connection].onmessage = evt => {\n                let ticker = this._getTickerBySymbol(JSON.parse(evt.data).data)\n\n                this.props.dispatch({\n                    type: 'UPDATE_MARKET_PAIRS',\n                    data: ticker\n                })\n\n                !this.props.active_market.market && this._handleTabClick('BTC')\n                this.setState({\n                    isLoaded: true\n                })\n            }\n            this[connection].onerror = evt => {\n                console.error(evt);\n            }\n        }\n\n\ncomponentDidMount(props){\n  axios.get('https://api.binance/api/v1/exchangeInfo' )\n\n    .then.onmessage = (res => {\n      let ticker = this._getTickerBySymbol(JSON.parse(res.data).data)\n      //const crypto = res.v1\n      console.log(ticker);\n          this.props.dispatch({\n              type: 'UPDATE_MARKET_PAIRS',\n              data: ticker\n          })\n\n      this.setState ({crypto: crypto})\n    })\n    .catch ( error => {\n      console.log(error)\n    })\n\n}\n\n\n  render(){\n    return(\n\n      <div>\n      <h1>holassss</h1>\n      </div>\n    )\n  }\n}\n\nexport default MarketsContainer;\n"]},"metadata":{},"sourceType":"module"}